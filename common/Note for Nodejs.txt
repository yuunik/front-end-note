1.Web 开发模式
  - 基于服务端渲染的传统 Web 开发模式
      -- 前端耗时少
      -- 有利于SEO
      --- 占用服务器端资源
      --- 不利于前后端分离,开发效率低
  - 基于前后端分离的新型 Web 开发模式
      -- 开发体验好
      -- 用户体验好
      -- 减轻了服务器端的渲染压力
      --- 不利于SEO
2.身份认证
  - 服务端渲染推荐使用 Session 认证机制
  - 前后端分离推荐使用 JWT 认证机制
3.Cookie
  - 自动发送
  - 域名独立
  - 过期时限
  - 4KB限制
  -- 不具有安全性
      --- 不能使用 Cookie 存储重要且隐私的数据
4.Session
  - express-session npm包。
5.JWT 认证机制。
  - 需要 jsonwebtoken 包。用于生成 JWT 字符串。
  - 需要 express-jwt 包。用于将 JWT 字符串解析还原成 JSON 对象。
Project:
    1.为了保证 路由模块 的纯粹性,所有的 路由处理函数,必须抽离到对应的 路由处理函数模块 中。
      --- 路由模块只负责定义规则,把客户端的请求映射到对应的路由处理函数中。至于处理函数如何定义,
      路由模块并不关心。
    2.表单验证模块的优化处理。
      --- 需要 @hapi/joi@17.1.0 和 @escook/express-joi 两个包。
        -- @hapi/joi@17.1.0 包解决"对表单中携带的每个数据项,定义验证规则"的需求。
          Joi.string() 要求该数据必须是字符串
          Joi.alphanum() 要求该数据必须是由数字或字母组成
          Joi.min(3) 要求该数据的长度最短需要3位
          Joi.max(12) 要求该数据的长度最长不得超过12位
          Joi.required() 要求该数据必须填写
          Joi.pattern() 可以定义一个正则表达式
          Joi.ref(xxx) 要求该数据的值必须和xxx的值相等
          可进行链式编程,简写为:
            Joi.string().alphanum().min(3).max(12).required();

        -- @escook/express-joi 包解决"实现自动对表单数据进行验证"的需求。
        表单数据通过 req.body 来获取,
        查询字符串数据通过 req.query 来获取,
        url中自带的数据通过 req.params 来获取。
    3.当表单数据验证成功时,会自动往 req 挂载 user 对象。
    4.必须在挂载路由模块之后,再挂载错误中间件。
    5.express.urlencoded() 中间件无法解析 multipart/form-data 格式的请求体数据,需要下载 multer 包来解析。
